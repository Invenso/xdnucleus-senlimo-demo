package com.invenso.xperido.senlimo.resources;

import com.invenso.xperido.senlimo.resources.exceptions.XDNucleusDemoException;
import org.w3c.dom.Document;

import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBElement;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Marshaller;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import java.util.List;

/**
 * Some utility methods
 */
public class Utils {

	/**
	 * Create xml from a JAXB entity
	 *
	 * @param element     The entity wrapped in a JAXBElement (generated by the ObjectFactory)
	 * @param entityClass The entity class
	 * @param <T>         the entity class
	 * @return Document doc the JAXB entity as a DOM document
	 */
	public static <T> Document createXML(JAXBElement<T> element, Class<T> entityClass) throws XDNucleusDemoException {
		try {
			JAXBContext jaxbContext = JAXBContext.newInstance(entityClass);
			Marshaller marshaller = jaxbContext.createMarshaller();

			// set marshaller properties, format xml to make it user readable.
			marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, true);

			// prepare DOM document
			DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
			DocumentBuilder db = dbf.newDocumentBuilder();
			Document document = db.newDocument();

			// marshall object as to DOM Document
			marshaller.marshal(element, document);

			return document;
		} catch (JAXBException | ParserConfigurationException e) {
			throw new XDNucleusDemoException("Could not generate xml from contract: " + e.getMessage(), e);
		}
	}

	/**
	 * Selects an entity from the database
	 * <p>
	 * Assumes there is a named query '<className>.byID'
	 *
	 * @param db          the database wrapper
	 * @param entityClass the class of the entity to return
	 * @param id          the id of the entity
	 * @param <E>         the class of the entity
	 * @return the JPA entity as retrieved by the named query
	 * @throws XDNucleusDemoException
	 */
	public static <E> E selectById(Database db, Class<E> entityClass, int id) throws XDNucleusDemoException {
		// get order
		List<E> contractList = db.getEntityManager().createNamedQuery(entityClass.getSimpleName() + ".byID", entityClass)
				.setParameter("id", id).getResultList();
		// orders object to build, convert to XML
		if (contractList.size() == 1) {
			return contractList.get(0);
		} else {
			throw new XDNucleusDemoException(entityClass.getSimpleName() + " '" + id + "' not found");
		}
	}
}
